Case 1: Create A Book Package

Let's say we want to add a package of type "Book" to the system.
We first run the program to get to the Main Menu.
Then we enter "2" to add a package.

The program will ask the User what type of package they want to add
(1 - Book, 2 - Perishable, 3 - Electronic), in our case we want to add a Book,
so we input "1" and press enter.

Now the program will ask the user for a series of inputs.
The inputs all have try-catches to them to catch incorrect inputs.

It will first ask the user for the name of the book, the program will not allow
spaces or an empty line as a name. If the user simply presses enter or a space and then enter
the program will ask the User for a proper name. The name of the book can be any String.

The program will then ask the User for any notes for the package, this can be left blank

The program then asks for double inputs of price and weight for the package, anything that is not
an double input will be caught and the program will keep asking the User for an input until the input is correct.

Similarly, the program will ask the user for integer input for a creation of the LocalDateTime object
that stores the expected delivery date of the package.
With the expected delivery date, it will assume the User will only input an integer.
It will check if the integer is correct for a LocalDateTime object.

And then finally, the program will ask the user for a String input of the book's author name.

After all inputs are correctly stored, the program will create a Book package object via the PackageFactory class.
This is where OOD comes in.
PackageFactory class has the getInstance method that returns a PackageBase object, expect
the method returns either a Book, Perishable, or Electronic object. These 3 objects are subclasses to the PackageBase class,
so through Polymorphism and Inheritance of the abstract PackageBase class, getInstance can return whichever object is required
without needing to return a specific subclass's instance.

The array that stores the saved objects is also of PackageBase. Since PackageBase cannot be instantiated, only objects of
the subclasses (Book, Perishable, Electronic) can be added to it, since, again, they inherit from the superclass.

At this point, the program gets the Book object from the factory class and saves it to the ArrayList of packages.
Book package is saved as an object and that object holds all the properties of a package with the additional property
of author name that only Book has. This is all possible, again, due to Polymorphism and Inheritance.


------------------------------------------------------------------------------



Case 2: Set A Package to Delivered

Let's say we want to set a package of type "Electronic" as delivered.
We first run the program to get to the Main Menu.
Then we enter "6" to select option "Mark Package As Delivered".

We are given a list of all packages and a prompt to enter the package number that we want
to mark as delivered.

We can input any of the listed package numbers and the system will mark it for us.

How is this possible if all the packages are of varying types (Book, Perishable, Electronic)?

This is all possible due to OOD.
As mentioned in Case 1, the subclasses Book, Perishable, Electronic inherit from the superclass PackageBase.
These subclasses all have the fields of PackageBase and their own additional add-on features.
In addition, these subclasses have the implemented methods of PackageBase, since the superclass implements abstract
methods from the Package interface.

One of these methods is the "setDeliveryStatus" method. So if a package (regardless of subclass type) wants to
mark itself as delivered, it just needs to call that method and the program will mark it as delivered.

This way of having a base class with implementations of abstract methods from an Interface allows us to create
specific objects that all inherit the same methods so it can do basic tasks.